
name: HR Management System CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"] # Test across multiple Python versions

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: ci_user
          POSTGRES_PASSWORD: ci_password
          POSTGRES_DB: ci_test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django tests
        env:
          # Set Django SECRET_KEY for tests (use a dummy one for CI)
          SECRET_KEY: ${{ secrets.DJANGO_TEST_SECRET_KEY }}
          # Database configuration for tests (if using the 'services' block)
          DATABASE_URL: postgres://ci_user:ci_password@localhost:5432/ci_test_db
          # Any other environment variables your tests need
        run: |
          python manage.py collectstatic --noinput # If your tests rely on static files being collected
          python manage.py makemigrations --check --dry-run # Check for unapplied migrations
          python manage.py migrate --noinput # Apply migrations for test database
          python manage.py test --noinput

      # Optional: Add linting, static analysis, etc.
      - name: Run Black formatter check
        run: |
          pip install black
          black --check .

      - name: Run Flake8 linter
        run: |
          pip install flake8
          flake8 .